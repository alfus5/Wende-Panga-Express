// Import the functions you need from the SDKs you need
import { initializeApp } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-app.js";
import { getAnalytics } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-analytics.js"; // <--- Import getAnalytics here!
import { getDatabase, ref, push } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-database.js";

// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyBo4JVuZi5AtC1wY1TXx4Az8ckQv5QrBPI",
  authDomain: "wende-panga-express.firebaseapp.com",
  projectId: "wende-panga-express",
  storageBucket: "wende-panga-express.firebasestorage.app",
  messagingSenderId: "661266039149",
  appId: "1:661266039149:web:a6b82733096ed5217a9a64",
  measurementId: "G-0JKLWTYV81" // Great, you have your measurement ID included!
};

// Initialiser Firebase
const app = initializeApp(firebaseConfig);
const analytics = getAnalytics(app); // Now getAnalytics should be defined!
const database = getDatabase(app); // Initialiser la base de donn√©es

// √âcrire des donn√©es en utilisant la syntaxe modulaire
// 1. Get a reference to the 'rendezvous/' path
const rendezvousRef = ref(database, 'rendezvous/');

// You can also use the push function directly like this:
push(rendezvousRef, {
  client: "John Doe",
  tel: "06 00 00 00 00",
  date: "05-06-2025",
  heure: "17:30",
  service: 0,
  message: `üîß Service : Vanne EGR
üìã Description : La vanne EGR r√©duit les √©missions de NOx en recyclant les gaz.
‚ùó Sympt√¥mes :
- Ralenti instable
- Odeur de gaz
- Moteur bruyant`
})
.then(() => {
  console.log("Data saved successfully!");
})
.catch((error) => {
  console.error("Data could not be saved.", error);
});

// Just a note: In the modular SDK, you generally use the imported functions directly
// like `push(rendezvousRef, { ... })` instead of `database.ref(...).push(...)`.
// Both will work, but the direct function call is the more common mod√®ukular pattern.S



//Fonctions site


let sectionHistory = ['accueil'];

function showSection(id) {
  let skipHistory = false
  const current = document.querySelector('section:not(.section-hidden), footer:not(.section-hidden)');
  if (current && current.id !== id && !skipHistory) {
    sectionHistory.push(current.id);
  }

  document.querySelectorAll('section, footer').forEach(s => s.classList.add('section-hidden'));

  const target = document.getElementById(id) || document.querySelector(`footer#${id}`);
  if (target) {
    if (id === 'rendezvous') {
      document.querySelector('#rdv-titre').textContent = `Prendre Rendez-vous`;
      document.querySelector('select[name="service"]').value = "";
      document.querySelector('textarea[name="message"]').value = "";
      document.getElementById('description-service').textContent = "";
      document.getElementById('symptomes-service').innerHTML = "";
      document.getElementById('rdv-intro').style.display = 'block';
      document.getElementById('formulaire-rdv').style.display = 'none';
    }

    target.classList.remove('section-hidden');

    if (id === 'accueil') {
      applyCarouselEffect();
    }
  }
}


const groupesPrincipaux = ['reparations', 'electronique', 'moteur', 'defauts'];

function showPreviousSection() {
  const previous = sectionHistory.pop();

  if (previous && document.getElementById(previous)) {
    showSection(previous, true); // true = ne pas repush dans l‚Äôhistorique
  } else if (previous && document.querySelector(`footer#${previous}`)) {
    showSection(previous, true);
  } else {
    showSection('accueil', true);
  }
}





function envoyerRDV(event) {
  event.preventDefault();
  const confirmation = document.getElementById('confirmation');
  confirmation.style.display = 'block';
  setTimeout(() => {
    confirmation.style.display = 'none';
    showSection('accueil');
  }, 3000);
}

function applyCarouselEffect() {
  const carousel = document.querySelector('#accueil .carousel-centered');
  if (!carousel) return;
  const cards = carousel.querySelectorAll('.card');

  function updateTransform() {
    const center = carousel.scrollLeft + carousel.offsetWidth / 2;
    cards.forEach(card => {
      const cardCenter = card.offsetLeft + card.offsetWidth / 2;
      const distance = (center - cardCenter) / carousel.offsetWidth;
      const scale = 1 - Math.min(Math.abs(distance) * 0.6, 0.4);
      const rotate = distance * 25;
      card.style.transform = `scale(${scale}) rotateY(${rotate}deg)`;
      card.style.zIndex = `${Math.floor(1000 - Math.abs(distance) * 100)}`;
    });
  }

  carousel.addEventListener('scroll', updateTransform);
  updateTransform();
}

document.addEventListener('DOMContentLoaded', () => {
  document.querySelectorAll('.accordion-button').forEach(button => {
    button.addEventListener('click', () => {
      const content = button.nextElementSibling;
      const isExpanded = button.getAttribute('aria-expanded') === 'true';
      button.setAttribute('aria-expanded', !isExpanded);
      content.style.display = isExpanded ? 'none' : 'block';
    });
  });
});

window.onload = () => {
  showSection('accueil');
  applyCarouselEffect();
};

function openAccordion(id) {
  showSection(id);
  setTimeout(() => {
    const button = document.querySelector(`#${id} .accordion-button`);
    const content = document.querySelector(`#${id} .accordion-content`);
    if (button && content) {
      button.setAttribute('aria-expanded', true);
      content.style.display = 'block';
    }
  }, 100);
}

function showDetails(titre) {
  const currentVisible = document.querySelector('section:not(.section-hidden)');
  if (currentVisible) sectionHistory.push(currentVisible.id);
  document.querySelectorAll('section, footer').forEach(s => s.classList.add('section-hidden'));
  const titreElement = document.getElementById('accordion-title');
  if (titreElement) titreElement.textContent = titre;
  document.getElementById('accordion').classList.remove('section-hidden');
}

// =======================
// DONN√âES DES SERVICES
// =======================

const services = {
  fap: {
    titre: "Filtre √† Particules (FAP)",
    description: "Le FAP filtre les particules fines issues des gaz d‚Äô√©chappement.",
    symptomes: ["Perte de puissance", "Voyant moteur allum√©"],
    categorie: "R√©parations"
  },
  egr: {
    titre: "Vanne EGR",
    description: "La vanne EGR r√©duit les √©missions de NOx en recyclant les gaz.",
    symptomes: ["Ralenti instable", "Odeur de gaz", "Moteur bruyant"],
    categorie: "R√©parations"
  },
  modeDegrade: {
    titre: "Mode d√©grad√©",
    description: "Le v√©hicule limite les performances pour prot√©ger le moteur.",
    symptomes: ["Vitesse limit√©e", "Aucune reprise", "Voyant clignotant"],
    categorie: "R√©parations"
  },
  interdiction: {
    titre: "Interdiction de d√©marrer",
    description: "Le v√©hicule emp√™che tout d√©marrage pour des raisons de s√©curit√© ou de panne critique.",
    symptomes: ["Message d'erreur", "Moteur ne se lance pas"],
    categorie: "R√©parations"
  },
  puissance: {
    titre: "Perte de puissance",
    description: "Le moteur tourne mais sans puissance r√©elle, souvent li√© √† une panne √©lectronique.",
    symptomes: ["Acc√©l√©ration faible", "Aucune reprise"],
    categorie: "R√©parations"
  },
  startStop: {
    titre: "Syst√®me Start-Stop",
    description: "Ce syst√®me coupe le moteur √† l‚Äôarr√™t pour √©conomiser du carburant.",
    symptomes: ["Le moteur ne red√©marre pas", "Fonction non disponible"],
    categorie: "√âlectronique"
  },
  lambda: {
    titre: "Sondes Lambda / O2",
    description: "Mesure l‚Äôoxyg√®ne dans les gaz d‚Äô√©chappement pour optimiser la combustion.",
    symptomes: ["Consommation √©lev√©e", "Ralenti instable", "Voyant pollution"],
    categorie: "√âlectronique"
  },
  volets: {
    titre: "Volets d‚Äôadmission",
    description: "Pi√®ces internes qui r√©gulent l‚Äôair entrant dans le moteur.",
    symptomes: ["Ralentissements", "Mauvaise combustion", "Voyant allum√©"],
    categorie: "√âlectronique"
  },
  erreurs: {
    titre: "Messages d‚Äôerreurs",
    description: "Diff√©rents messages d'erreurs √©lectroniques d√©tect√©s √† bord.",
    symptomes: ["Messages OBD", "Voyants multiples"],
    categorie: "√âlectronique"
  },
  adblue: {
    titre: "Syst√®me AdBlue",
    description: "Injection d‚Äôur√©e pour r√©duire les √©missions d‚Äôoxyde d‚Äôazote.",
    symptomes: ["Message de panne AdBlue", "Refus de d√©marrage"],
    categorie: "Syst√®me moteur"
  },
  demarrageChaud: {
    titre: "Probl√®me de d√©marrage √† chaud",
    description: "Le moteur peine √† red√©marrer une fois chaud, d√ª √† un capteur ou √† l‚Äôinjection.",
    symptomes: ["Impossible de red√©marrer", "Attente longue"],
    categorie: "Syst√®me moteur"
  },
  synchro: {
    titre: "Synchronisation calculateurs",
    description: "Mise √† jour ou appairage des calculateurs du v√©hicule.",
    symptomes: ["Voyant √©lectronique", "Comportement instable"],
    categorie: "Syst√®me moteur"
  },
  defauts: {
    titre: "Codes & D√©fauts",
    description: "Lecture et suppression des codes erreurs du v√©hicule.",
    symptomes: ["Voyants affich√©s", "Messages OBD persistants"],
    categorie: "Codes & D√©fauts"
  }
};

function showRDV(serviceKey) {
  const data = services[serviceKey];
  if (!data) return;

  const current = document.querySelector('section:not(.section-hidden)');
  if (current) sectionHistory.push(current.id); // ajoute section actuelle

  sectionHistory.push(data.categorie.toLowerCase()); // ajoute le groupe (ex: reparations)

  showSection('rendezvous');
  document.querySelector('#rdv-titre').textContent = `üîß ${data.titre}`;
  document.querySelector('#description-service').textContent = data.description;
  document.querySelector('#symptomes-service').innerHTML = data.symptomes.map(s => `<li>${s}</li>`).join('');
  document.getElementById('rdv-intro').style.display = 'block';
  document.getElementById('formulaire-rdv').style.display = 'none';
  document.getElementById('select-service').value = data.categorie;
  document.querySelector('textarea[name="message"]').value =
    `üîß Service : ${data.titre}\nüìã Description : ${data.description}\n‚ùó Sympt√¥mes :\n- ${data.symptomes.join('\n- ')}`;
}




function afficherFormulaireRDV() {
  document.getElementById('rdv-intro').style.display = 'none';
  document.getElementById('formulaire-rdv').style.display = 'flex';
}

function toggleMenu() {
  const menu = document.querySelector("nav ul");
  menu.classList.toggle("show");
}

window.showSection = showSection;
window.showPreviousSection = showPreviousSection;
window.openAccordion = openAccordion;
window.showDetails = showDetails;
window.showRDV = showRDV;
window.envoyerRDV = envoyerRDV;
window.afficherFormulaireRDV = afficherFormulaireRDV;
window.toggleMenu = toggleMenu;
